#!/bin/bash

MACRONAME=$1
OUTPUTNAME=${1%.C}.pdf

pushd plots > /dev/null

# Remake output if not there.
if [ -e ${OUTPUTNAME} ]; then
		REMAKE=0
else
		REMAKE=1
fi

# if we are newer...
test ${0} -nt ${OUTPUTNAME} && REMAKE=1

# if ghostscriptifyPDF is newer...
test ghostscriptifyPDF -nt ${OUTPUTNAME} && REMAKE=1

# if input is newer...
test ${MACRONAME} -nt ${OUTPUTNAME} && REMAKE=1

# Dependencies, it's C++, sort of!
OLD_IFS=${IFS}
IFS=$'\n'
NAMED_MACRO_DEPS=$(grep -E '#\s*include\s+"([^>]*)"' ${MACRONAME}                  | sed -n -e 's/.*[^"]*["]\([^"]\+\)["].*/\1/p')
UNNAMED_MACRO_DEPS=$(grep -E '\s*gInterpreter->LoadFile\("([^"]*)"\)' ${MACRONAME} | sed -n -e 's/.*[^"]*["]\([^"]\+\)["].*/\1/p')
MACRO_BASE_DIR=$(dirname ${MACRONAME})

for DEP in ${NAMED_MACRO_DEPS}; do
		if [[ ! "${DEP}" =~ ^/ ]]; then
				test "${MACRO_BASE_DIR}/${DEP}" -nt ${OUTPUTNAME} && REMAKE=1
		fi
done
for DEP in ${UNNAMED_MACRO_DEPS}; do
		if [[ ! "${DEP}" =~ ^/ ]]; then
				test "${MACRO_BASE_DIR}/${DEP}" -nt ${OUTPUTNAME} && REMAKE=1
		fi
done
IFS=${OLD_IFS}

if [ ${REMAKE} -eq 1 ]; then
		echo "Need to remake ${OUTPUTNAME}..."
		# Remove output so LaTeX will never pickup old stuff no matter our exit status.
		rm ${OUTPUTNAME}
else
		echo "${OUTPUTNAME} still current."
		popd > /dev/null
		exit 0
fi

root -q -b -l ${MACRONAME}+

if [ $? -eq 0 ]; then
		echo "Remaking ${OUTPUTNAME} went well."
		./ghostscriptifyPDF ${OUTPUTNAME}
else
		echo "Remaking of ${OUTPUTNAME} failed, removing it!"
		rm ${OUTPUTNAME}
fi

popd > /dev/null
